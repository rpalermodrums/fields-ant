{"version":3,"file":"main.0508a8b88914eac33b0c.bundle.js","sources":["webpack:///./src/inputs/ObjectSearchCreate.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { observable, toJS } from 'mobx';\nimport { inject, observer } from 'mobx-react';\nimport autoBindMethods from 'class-autobind-decorator';\n\nimport SmartBool from '@mighty-justice/smart-bool';\nimport { toKey } from '@mighty-justice/utils';\n\nimport * as Antd from 'antd';\n\nimport {\n  IAntFormField,\n  IFieldConfigObjectSearchCreate,\n  IInjected,\n  IInputProps,\n  NestedFieldSet,\n} from '../';\n\nconst MIN_SEARCH_LENGTH = 3;\n\n@inject('getEndpoint')\n@autoBindMethods\n@observer\nclass ObjectSearchCreate extends Component<IInputProps> {\n  @observable private isAddingNew = new SmartBool();\n  @observable private options: Array<{ id: string, name: string }> = [];\n  @observable private search = '';\n\n  private get injected () {\n    return this.props as IInjected & IInputProps & IAntFormField;\n  }\n\n  private get fieldConfig () {\n    return this.props.fieldConfig as IFieldConfigObjectSearchCreate;\n  }\n\n  private async handleSearch (value: string) {\n    const { getEndpoint } = this.injected\n      , { endpoint, searchFilters } = this.fieldConfig\n      , params = {\n        search: value,\n        ...searchFilters,\n      }\n      ;\n\n    this.search = value;\n    const response = await getEndpoint(`/${endpoint}/${toKey(params)}`);\n    this.options = response.results;\n  }\n\n  private addNew () {\n    this.isAddingNew.setTrue();\n  }\n\n  private onChange (value: any) {\n    const foundOption = this.options.find(option => option.id === value.key);\n    this.injected.onChange(toJS(foundOption));\n  }\n\n  public render () {\n    const { id, form } = this.injected;\n\n    if (this.isAddingNew.isTrue) {\n      return (\n        <>\n          <NestedFieldSet\n            fieldSet={this.fieldConfig.createFields}\n            id={id}\n            search={this.search}\n            setFields={form.setFields}\n          />\n          <Antd.Button size='small' onClick={this.isAddingNew.setFalse}>\n            <Antd.Icon type='left' /> Back to search\n          </Antd.Button>\n        </>\n      );\n    }\n\n    return (\n      <Antd.Input.Group className='ant-input-group-search-create' compact>\n        <Antd.Select\n          allowClear\n          defaultActiveFirstOption={false}\n          filterOption={false}\n          id={id}\n          labelInValue\n          onChange={this.onChange}\n          onSearch={this.handleSearch}\n          placeholder='Select existing'\n          showSearch\n        >\n          {this.options.map(option => (\n            <Antd.Select.Option\n              key={option.id}\n              value={option.id}\n            >\n              {option.name}\n            </Antd.Select.Option>\n          ))}\n        </Antd.Select>\n        <Antd.Button\n          className='osc-add-new'\n          disabled={this.search.length < MIN_SEARCH_LENGTH}\n          icon='plus'\n          onClick={this.addNew}\n        >\n          Add New\n        </Antd.Button>\n      </Antd.Input.Group>\n    );\n  }\n}\n\nexport default ObjectSearchCreate;\n"],"mappings":"AAAA","sourceRoot":""}